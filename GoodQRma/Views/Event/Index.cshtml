@model PagedList.IPagedList<GoodQRma.Models.Event> 

@using PagedList.Mvc;

@{
    ViewBag.Title = "Event";
    List<string> addresses = new List<string>();
    foreach (var i in Model)
    {
        addresses.Add(i.getFullAddress());
    }
}

<h2>
   
    Here's where to find GoodQRma!
</h2>
<!DOCTYPE html>
<html>
<head>
    <title>Find GoodQRma</title>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script>
        var list1 = [];
        var bounds = new google.maps.LatLng();
        function listToArray() {
            @foreach(var x in addresses)
        {
            @:list1.push("@x");
                                                }
        }
        listToArray();
        //alert(list1.join('\n'));
        var geocoder;
        var map;
        function initialize() {
            geocoder = new google.maps.Geocoder();
            var latlng = new google.maps.LatLng(42.3314, -83.0458);
            var mapOptions = {
                zoom: 10,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
            setMarkers();

            var bounds = new google.maps.LatLngBounds();
            //map.fitBounds(bounds);
            var infoWindow = new google.maps.InfoWindow({ map: map });
            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    infoWindow.setPosition(pos);
                    infoWindow.setContent('You Are Here.');
                    map.setCenter(pos);
                    var marker = new google.maps.Marker({
                        map: map,
                        position: (pos),
                        animation: google.maps.Animation.BOUNCE
                    });

                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        }
        function setMarkers() {
            for (var i = 0; i < list1.length; i++) {
                geocoder.geocode({ 'address': list1[i] }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        map.setCenter(results[0].geometry.location);
                        //alert(results[0].geometry.location);
                        var marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location,
                        });
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }
        }
        google.maps.event.addDomListener(window, 'load', initialize);
    </script>
</head>
</html>
<div id="map-canvas" style="width:100%;height:300px;"></div>
<br />
    @using (Html.BeginForm("Index", "Event", FormMethod.Get))
    {
    <p>
        Search Event Types: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
    }

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
        </th>
        <th>
            @Html.ActionLink("Event", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            Category
        </th>
        <th>
            @Html.ActionLink("Event Date", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Time", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            Address
        </th>
        <th>
            City
        </th>
        <th>
            State
        </th>
        <th>
            Zip
        </th>
        <th>
            Country
        </th>
        <th>
            Contact
        </th>
        <th>
            Phone
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.ActionLink("Details", "Details", new { id = item.eventID })
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.eventType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.eventDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.eventTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.address1)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.city)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.state)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.zipCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.country)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.contact)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.phone)
            </td>
           
        </tr>
    }

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))